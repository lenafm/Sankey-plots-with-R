gg <- gg +
scale_fill_manual(name = fill_input, values  = palette) +
scale_color_manual(values = palette)
}
if(!is.null(labels)){
gg <- gg +
scale_x_discrete(labels = labels)
}
}
create_sankey_plot(df = dat_plot,
palette = flow_colours,
labels = labels,
stratum_colour = stratum_colour,
stratum_font_colour = stratum_font_colour)
create_sankey_plot(df = dat_plot)
create_sankey_plot <- function(df, palette = NULL, labels = NULL, stratum_colour = "black", stratum_font_colour = "white"){
stratum_font_colour <- stratum_font_colour
stratum_fill_colour <- stratum_colour
stratum_line_colour <- stratum_font_colour
stratum_width <- 0.4
stratum_angle <- 0
legend_position <- "right"
alpha <- 0.7
gg <- ggplot(df, aes(x = x, id = id, split = stratum, value = Freq)) +
geom_parallel_sets(aes(fill = fill), alpha = alpha, axis.width = stratum_width) +
geom_parallel_sets_axes(axis.width = stratum_width,
fill = stratum_fill_colour,
colour = stratum_fill_colour) +
geom_parallel_sets_labels(colour = stratum_font_colour, angle = stratum_angle) +
theme_minimal() +
theme(
legend.position = legend_position,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.x  = element_blank()
)
if(!is.null(palette)){
gg <- gg +
scale_fill_manual(name = fill_input, values  = palette) +
scale_color_manual(values = palette)
}
if(!is.null(labels)){
gg <- gg +
scale_x_discrete(labels = labels)
}
return(gg)
}
create_sankey_plot(df = dat_plot)
create_sankey_plot <- function(df, palette = NULL, labels = NULL, stratum_colour = "black", stratum_font_colour = "white"){
stratum_font_colour <- stratum_font_colour
stratum_fill_colour <- stratum_colour
stratum_line_colour <- stratum_font_colour
stratum_width <- 0.4
stratum_angle <- 0
legend_position <- "right"
alpha <- 0.7
gg <- ggplot(df, aes(x = x, id = id, split = stratum, value = Freq)) +
geom_parallel_sets(aes(fill = fill), alpha = alpha, axis.width = stratum_width) +
geom_parallel_sets_axes(axis.width = stratum_width,
fill = stratum_fill_colour,
colour = stratum_fill_colour) +
geom_parallel_sets_labels(colour = stratum_font_colour, angle = stratum_angle) +
scale_fill_manual(name = fill_input) +
theme_minimal() +
theme(
legend.position = legend_position,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.x  = element_blank()
)
if(!is.null(palette)){
gg <- gg +
scale_fill_manual(name = fill_input, values = palette) +
scale_color_manual(values = palette)
}
if(!is.null(labels)){
gg <- gg +
scale_x_discrete(labels = labels)
}
return(gg)
}
create_sankey_plot(df = dat_plot)
create_sankey_plot <- function(df, palette = NULL, labels = NULL, stratum_colour = "black", stratum_font_colour = "white"){
stratum_font_colour <- stratum_font_colour
stratum_fill_colour <- stratum_colour
stratum_line_colour <- stratum_font_colour
stratum_width <- 0.4
stratum_angle <- 0
legend_position <- "right"
alpha <- 0.7
gg <- ggplot(df, aes(x = x, id = id, split = stratum, value = Freq)) +
geom_parallel_sets(aes(fill = fill), alpha = alpha, axis.width = stratum_width) +
geom_parallel_sets_axes(axis.width = stratum_width,
fill = stratum_fill_colour,
colour = stratum_fill_colour) +
geom_parallel_sets_labels(colour = stratum_font_colour, angle = stratum_angle) +
scale_fill_discrete(name = fill_input) +
theme_minimal() +
theme(
legend.position = legend_position,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.x  = element_blank()
)
if(!is.null(palette)){
gg <- gg +
scale_fill_manual(name = fill_input, values = palette) +
scale_color_manual(values = palette)
}
if(!is.null(labels)){
gg <- gg +
scale_x_discrete(labels = labels)
}
return(gg)
}
create_sankey_plot(df = dat_plot)
input_data
### load data
input_data <- read.csv("example_data.csv")
input_data
names(input_data)
runApp('sankeyplot_app_ggforce.R')
input_data
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
cols_input <- c("Class", "Sex", "Age")
fill_input <- "Survived"
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
library(shiny)
### load in packages
library("dplyr")
library("titanic")
library("ggplot2")
library("ggforce")
# ### set wd (remove later)
# setwd("C:/Users/Lena/Documents/Datasketch/Sankey plots in R")
#
# ### this will be the user input
# cols_input <- c("Class", "Sex", "Age")
# fill_input <- "Survived"
#
# ### specify plot settings
# stratum_font_colour = "white"
# stratum_colour = "black"
# flow_colours <- c("orange", "blue")
# labels <- c("change", "these", "labels")
### load data
input_data <- read.csv("example_data.csv")
prepare_data <- function(df, cols_var, fill_var = NULL){
if(is.null(fill_var) | fill_var %in% cols_var){
groupby <- cols_var
} else {
groupby <- c(cols_var, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
mutate(id = row_number()) %>%
ungroup()
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
cols_var)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
cols_var) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
return(dat_plot)
}
cols_input <- c("Class", "Sex", "Age")
fill_input <- "Survived"
prepare_data(df=input_data, cols_var=cols_input, fill_var=fill_input)
ex = prepare_data(df=input_data, cols_var=cols_input, fill_var=fill_input)
View(ex)
fill_var = fill_input
cols_var = cols_input
if(is.null(fill_var) | fill_var %in% cols_var){
groupby <- cols_var
} else {
groupby <- c(cols_var, fill_var)
}
groupby
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
mutate(id = row_number()) %>%
ungroup()
df = input_data
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
mutate(id = row_number()) %>%
ungroup()
head(dat_prelim)
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
head(dat_prelim)
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
library(shiny)
### load in packages
library("dplyr")
library("titanic")
library("ggplot2")
library("ggforce")
# ### set wd (remove later)
# setwd("C:/Users/Lena/Documents/Datasketch/Sankey plots in R")
#
# ### this will be the user input
cols_input <- c("Class", "Sex", "Age")
fill_input <- "Survived"
### load data
input_data <- read.csv("example_data.csv")
df = input_data
library(shiny)
### load in packages
library("dplyr")
library("titanic")
library("ggplot2")
library("ggforce")
# ### set wd (remove later)
# setwd("C:/Users/Lena/Documents/Datasketch/Sankey plots in R")
#
#
# ### specify plot settings
# stratum_font_colour = "white"
# stratum_colour = "black"
# flow_colours <- c("orange", "blue")
# labels <- c("change", "these", "labels")
### load data
input_data <- read.csv("example_data.csv")
### for local testing
df <- input_data
cols_vars <- c("Class", "Sex", "Age")
fill_var <- "Survived"
library(shiny)
### load in packages
library("dplyr")
library("titanic")
library("ggplot2")
library("ggforce")
# ### set wd (remove later)
# setwd("C:/Users/Lena/Documents/Datasketch/Sankey plots in R")
#
#
# ### specify plot settings
# stratum_font_colour = "white"
# stratum_colour = "black"
# flow_colours <- c("orange", "blue")
# labels <- c("change", "these", "labels")
### load data
input_data <- read.csv("example_data.csv")
### for local testing
df <- input_data
cols_vars <- c("Class", "Sex", "Age")
fill_var <- "Survived"
fill_var <- ""
if(fill_var == ""){
fill_var <- NULL
}
if(is.null(fill_var) | fill_var %in% cols_var){
groupby <- cols_var
} else {
groupby <- c(cols_var, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
cols_var)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
cols_var) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
### load data
input_data <- read.csv("example_data.csv")
### for local testing
df <- input_data
col_vars <- c("Class", "Sex", "Age")
fill_var <- "Survived"
fill_var <- ""
###================================================================================
### functions
###================================================================================
prepare_data <- function(df, col_vars, fill_var = NULL){
if(fill_var == ""){
fill_var <- NULL
}
if(is.null(fill_var) | fill_var %in% col_vars){
groupby <- col_vars
} else {
groupby <- c(col_vars, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
return(dat_plot)
}
if(fill_var == ""){
fill_var <- NULL
}
if(is.null(fill_var) | fill_var %in% col_vars){
groupby <- col_vars
} else {
groupby <- c(col_vars, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
is.null(fill_var) | fill_var %in% col_vars
is.null(fill_var)
fill_var %in% col_vars
col_vars
fill_var
if(fill_var == ""){
fill_var <- NULL
}
if(is.null(fill_var) | (!is.null(fill_var) & fill_var %in% col_vars)){
groupby <- col_vars
} else {
groupby <- c(col_vars, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
is.null(fill_var)
(!is.null(fill_var) & fill_var %in% col_vars)
!is.null(fill_var)
if(fill_var == ""){
fill_var <- NULL
}
if(is.null(fill_var)){
groupby <- col_vars
} else if(fill_var %in% col_vars){
groupby <- col_vars
} else {
groupby <- c(col_vars, fill_var)
}
dat_prelim <- df %>%
group_by_at(groupby) %>%
summarise(Freq = n()) %>%
ungroup() %>%
mutate(id = row_number())
if(is.null(fill_var)){
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars)
} else {
dat_plot <- dat_prelim %>%
tidyr::gather(key = "x",
value = "stratum",
factor_key = TRUE,
col_vars) %>%
left_join(dat_prelim %>%
mutate_(fill = fill_var) %>%
select(id, fill),
by = "id")
}
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
runApp('sankeyplot_app_ggforce.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='lenamangold', token='82A97B2F36CA00CE6DC78F1FCF1A43A7', secret='ltLoumzw9ZQ5fy42sPPvp2dMmn9s4KabyAwxS0eO')
library(rsconnect)
rsconnect::deployApp('C:/Users/Lena/Documents/Datasketch/Sankey plots in R/sankeyplot_app_ggforce.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/Lena/Documents/Datasketch/Sankey plots in R/app')
library(rsconnect)
rsconnect::deployApp('C:/Users/Lena/Documents/Datasketch/Sankey plots in R/app')
library(rsconnect)
rsconnect::deployApp('C:/Users/Lena/Documents/Datasketch/Sankey plots in R/app')
library(rsconnect)
rsconnect::deployApp('C:/Users/Lena/Documents/Datasketch/Sankey plots in R/app')
library(rsconnect)
rsconnect::deployApp()
runApp('app/sankey_app.R')
runApp('app/sankey_app.R')
library(rsconnect)
rsconnect::deployApp()
setwd("C:/Users/Lena/Documents/Datasketch/Sankey plots in R/app")
library(rsconnect)
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
runapp()
runApp()
library(rsconnect)
rsconnect::deployApp()
runApp()
library(shiny)
runApp()
runApp('sankey_app.R')
runApp('sankey_app.R')
runApp('sankey_app.R')
